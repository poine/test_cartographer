<?xml version="1.0"?>

<!--
rosservice call /finish_trajectory 0
rosservice call /write_state state.pbstream
-->
<!-- rosbag record /caroline/base_link_truth1 /caroline/diff_drive_controller/odom /caroline/laserscan /flat_imu /tf /tf_static /landmark -->

<launch>

  <arg name="start_gazebo" default="true" />
  <arg name="start_gazebo_gui" default="true" />
  <arg name="start_fix_gazebo_truth" default="true" />
  <arg name="start_teleop" default="true" />
  <arg name="start_cartographer" default="true" />
  <arg name="start_lane_detection" default="false" />
  <arg name="start_guidance" default="true" />
  <arg name="start_guidance_lane" default="false" />
  <arg name="start_rviz" default="true" />
  
  <arg name="world_name" default="$(find common_simulations)/worlds/track_trr_z.world" />
  <arg name="robot_type" default="roverboard" /> <!-- also works with nono -->
  <arg name="robot_name" default="caroline" />
  <!-- ****** Robot Type specifics *****  -->
  <arg name="sim_pkg" value="$(arg robot_type)_simulator"/>
  <arg name="guid_pkg" value="$(arg robot_type)_guidance"/>

  
  <group if="$(arg start_gazebo)">
  <include file="$(eval find(arg('sim_pkg')) + '/launch/empty_world.launch')">
      <arg name="start_gazebo" value="$(arg start_gazebo)" />
      <arg name="gz_gui" value="$(arg start_gazebo_gui)" />
      <arg name="world_name" value="$(arg world_name)" />
      <arg name="robot_name" value="$(arg robot_name)" />
      <arg name="robot_cfg" value="_test_amcl" />
      <arg name="robot_initial_xy" value="-x -1.75 -y 1.25"/>
    </include>
  </group>

   <!-- ****** Fix gazebo not doing frames namespacing ***** -->
   <group if="$(arg start_fix_gazebo_truth)">
     <node name="gazebo_truth_fix" pkg="common_simulations" type="fix_gazebo_truth.py">
       <param name="robot_name"   value="$(arg robot_name)" />
     </node>
   </group>

  <!--  ****** Teleop *****  -->
  <group if="$(arg start_teleop)">
    <include file="$(eval find(arg('guid_pkg')) + '/launch/teleop.launch')">
      <arg name="robot_name"   value="$(arg robot_name)" />
    </include>
  </group>

  <!--  ****** cartographer *****  -->
  <arg name="carto_load_state" default="false"/>
  <!-- <arg name="carto_state_filename" default="state.pbstream"/> -->
  <arg name="carto_state_filename" default="state_caroline_sim_z_1.pbstream"/>
  <arg name="carto_use_aruco_lm" default="false"/>
  
  <group if="$(arg start_cartographer)">
    <!-- cartographer_node -->
    <group unless="$(arg carto_load_state)">
      <arg name="configuration_basename" value="$(eval 'caroline_sim_lsd_2d_lm.lua' if arg('carto_use_aruco_lm') else 'caroline_sim_lsd_2d.lua')"/>
      <node pkg="cartographer_ros" type="cartographer_node" name="cartographer_node" 
            args="-configuration_directory $(find test_cartographer)/cfg
		  -configuration_basename $(arg configuration_basename)"
            output="log">
	<remap from="/imu" to="/flat_imu"/>
	<remap from="/odom" to="/caroline/diff_drive_controller/odom"/>
	<remap from="/scan" to="/caroline/laserscan"/>
      </node>
    </group>
    <group if="$(arg carto_load_state)">
      <arg name="configuration_basename" value="$(eval 'caroline_sim_lsd_2d_pure_loc_lm.lua' if arg('carto_use_aruco_lm') else 'caroline_sim_lsd_2d_pure_loc.lua')"/>
      <node pkg="cartographer_ros" type="cartographer_node" name="cartographer_node" 
            args="-configuration_directory $(find test_cartographer)/cfg
		  -configuration_basename $(arg configuration_basename)
		  -load_state_filename $(arg carto_state_filename)"
            output="screen">
	<remap from="/imu" to="/flat_imu"/>
	<remap from="/odom" to="/caroline/diff_drive_controller/odom"/>
	<remap from="/scan" to="/caroline/laserscan"/>
      </node>
    </group>
    
    <!-- cartographer_occupancy_grid_node -->
    <node pkg="cartographer_ros" type="cartographer_occupancy_grid_node"
          name="cartographer_occupancy_grid_node" 
          args="-resolution 0.05" />
    
    <!-- flat_world_imu_node -->
    <node pkg="turtlebot3_slam" type="flat_world_imu_node" name="flat_world_imu_node" output="screen">
      <remap from="imu_in" to="/caroline/caroline/imu" />
      <remap from="imu_out" to="/flat_imu" />
    </node>

    <group if="$(arg carto_use_aruco_lm)">
      <!-- aruco landmark detector -->
      <node pkg="common_vision" type="aruco_landmarks_publisher.py" name="aruco_landmark_publisher">
	<param name="robot_name" value="$(arg robot_name)"/>
      </node>
    </group>
    
    
  </group>

  <!--  ****** Lane detection *****  -->
  <group if="$(arg start_lane_detection)">
    <!-- <node name="trr_vision_lane_node" pkg="two_d_guidance" type="trr_vision_lane_node.py"> -->
    <node name="lane_node" pkg="common_vision" type="lane_node.py" output="screen">
      <param name="robot_name"     value="$(arg robot_name)" />
      <param name="cameras"        value="$(arg robot_name)/camera_horiz_front"/>
      <param name="ref_frame"      value="$(arg robot_name)/base_link_footprint"/>
    </node>
  </group>
  
  <!--  ****** guidance *****  -->
  <group if="$(arg start_guidance)">
    <node name="guidance" pkg="two_d_guidance" type="pp_guidance_node.py" output="screen">
      <param name="twist_cmd_topic"           value="caroline/diff_drive_controller/cmd_vel"/>
      <param name="path_filename"             value="/home/poine/work/two_d_guidance/paths/demo_z/track_trr_sim_1.npz"/>
      <param name="vel_setpoint"              value="0.2"/>
      <param name="robot_pose_topic"          value="/caroline/base_link_truth1"/>
    </node>
  </group>
  <group if="$(arg start_guidance_lane)">
    <node name="lane_guidance_node" pkg="two_d_guidance" type="trr_guidance_node.py" output="screen">
      <param name="ref_frame" value="$(arg robot_name)/base_link_footprint"/>
      <param name="cmd_topic" value="$(arg robot_name)/diff_drive_controller/cmd_vel"/>
      <param name="path_name" value="demo_z/track_trr_sim_1.npz"/>
      <remap from="/trr_vision/lane/detected_model" to="/vision/lane/detected_model" />
      
    </node>
    <node name="lane_guidance_display_node" pkg="two_d_guidance" type="trr_guidance_display_node.py" >
      <param name="robot_name" value="$(arg robot_name)"/>
      <remap from="/odom" to="/$(arg robot_name)/diff_drive_controller/odom"/>
    </node>
  </group>

  
   <!-- rviz -->
   <group if="$(arg start_rviz)">
     <node pkg="rviz" type="rviz" name="rviz" required="true"
           args="-d $(find test_cartographer)/rviz/caroline_sim.rviz"/>
   </group>
  
</launch>
